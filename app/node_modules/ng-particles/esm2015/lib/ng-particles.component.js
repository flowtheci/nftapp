import { Component, EventEmitter, Input, Output } from '@angular/core';
import { tsParticles } from 'tsparticles';
export class NgParticlesComponent {
    constructor() {
        this.particlesLoaded = new EventEmitter();
        this.particlesInit = new EventEmitter();
    }
    ngAfterViewInit() {
        this.particlesInit.emit(tsParticles);
        const cb = (container) => {
            this.particlesLoaded.emit(container);
        };
        if (this.url) {
            tsParticles.loadJSON(this.id, this.url).then(cb);
        }
        else if (this.options) {
            tsParticles.load(this.id, this.options).then(cb);
        }
        else {
            console.error('You must specify options or url to load tsParticles');
        }
    }
}
NgParticlesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-particles',
                template: `
        <div [id]="id"></div> `
            },] }
];
NgParticlesComponent.propDecorators = {
    options: [{ type: Input }],
    url: [{ type: Input }],
    id: [{ type: Input }],
    particlesLoaded: [{ type: Output }],
    particlesInit: [{ type: Output }]
};
export class ParticlesComponent extends NgParticlesComponent {
    constructor() {
        super(...arguments);
        this.particlesLoaded = new EventEmitter();
        this.particlesInit = new EventEmitter();
    }
}
ParticlesComponent.decorators = [
    { type: Component, args: [{
                selector: 'Particles',
                template: `
        <div [id]="id"></div> `
            },] }
];
ParticlesComponent.propDecorators = {
    options: [{ type: Input }],
    url: [{ type: Input }],
    id: [{ type: Input }],
    particlesLoaded: [{ type: Output }],
    particlesInit: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcGFydGljbGVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvbmctcGFydGljbGVzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBVTFDLE1BQU0sT0FBTyxvQkFBb0I7SUFOakM7UUFVYyxvQkFBZSxHQUE0QixJQUFJLFlBQVksRUFBYSxDQUFDO1FBQ3pFLGtCQUFhLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7SUFpQi9FLENBQUM7SUFmVSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXJDLE1BQU0sRUFBRSxHQUFHLENBQUMsU0FBcUIsRUFBRSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNWLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO2FBQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3JCLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDSCxPQUFPLENBQUMsS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7U0FDeEU7SUFDTCxDQUFDOzs7WUEzQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUU7K0JBQ2lCO2FBRTlCOzs7c0JBRUksS0FBSztrQkFDTCxLQUFLO2lCQUNMLEtBQUs7OEJBQ0wsTUFBTTs0QkFDTixNQUFNOztBQXlCWCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsb0JBQW9CO0lBTjVEOztRQVVjLG9CQUFlLEdBQTRCLElBQUksWUFBWSxFQUFhLENBQUM7UUFDekUsa0JBQWEsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUMvRSxDQUFDOzs7WUFaQSxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRTsrQkFDaUI7YUFFOUI7OztzQkFFSSxLQUFLO2tCQUNMLEtBQUs7aUJBQ0wsS0FBSzs4QkFDTCxNQUFNOzRCQUNOLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdHNQYXJ0aWNsZXMgfSBmcm9tICd0c3BhcnRpY2xlcyc7XG5pbXBvcnQgdHlwZSB7IENvbnRhaW5lciwgRW5naW5lIH0gZnJvbSAndHNwYXJ0aWNsZXMnO1xuaW1wb3J0IHsgSVBhcnRpY2xlc1Byb3BzIH0gZnJvbSAnLi9uZy1wYXJ0aWNsZXMubW9kdWxlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZy1wYXJ0aWNsZXMnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXYgW2lkXT1cImlkXCI+PC9kaXY+IGAsXG4gICAgc3R5bGVzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgTmdQYXJ0aWNsZXNDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBASW5wdXQoKSBvcHRpb25zPzogSVBhcnRpY2xlc1Byb3BzO1xuICAgIEBJbnB1dCgpIHVybD86IHN0cmluZztcbiAgICBASW5wdXQoKSBpZDogc3RyaW5nO1xuICAgIEBPdXRwdXQoKSBwYXJ0aWNsZXNMb2FkZWQ6IEV2ZW50RW1pdHRlcjxDb250YWluZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxDb250YWluZXI+KCk7XG4gICAgQE91dHB1dCgpIHBhcnRpY2xlc0luaXQ6IEV2ZW50RW1pdHRlcjxFbmdpbmU+ID0gbmV3IEV2ZW50RW1pdHRlcjxFbmdpbmU+KCk7XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnBhcnRpY2xlc0luaXQuZW1pdCh0c1BhcnRpY2xlcyk7XG5cbiAgICAgICAgY29uc3QgY2IgPSAoY29udGFpbmVyPzogQ29udGFpbmVyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhcnRpY2xlc0xvYWRlZC5lbWl0KGNvbnRhaW5lcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMudXJsKSB7XG4gICAgICAgICAgICB0c1BhcnRpY2xlcy5sb2FkSlNPTih0aGlzLmlkLCB0aGlzLnVybCkudGhlbihjYik7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgICB0c1BhcnRpY2xlcy5sb2FkKHRoaXMuaWQsIHRoaXMub3B0aW9ucykudGhlbihjYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdZb3UgbXVzdCBzcGVjaWZ5IG9wdGlvbnMgb3IgdXJsIHRvIGxvYWQgdHNQYXJ0aWNsZXMnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdQYXJ0aWNsZXMnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXYgW2lkXT1cImlkXCI+PC9kaXY+IGAsXG4gICAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBQYXJ0aWNsZXNDb21wb25lbnQgZXh0ZW5kcyBOZ1BhcnRpY2xlc0NvbXBvbmVudCB7XG4gICAgQElucHV0KCkgb3B0aW9ucz86IElQYXJ0aWNsZXNQcm9wcztcbiAgICBASW5wdXQoKSB1cmw/OiBzdHJpbmc7XG4gICAgQElucHV0KCkgaWQ6IHN0cmluZztcbiAgICBAT3V0cHV0KCkgcGFydGljbGVzTG9hZGVkOiBFdmVudEVtaXR0ZXI8Q29udGFpbmVyPiA9IG5ldyBFdmVudEVtaXR0ZXI8Q29udGFpbmVyPigpO1xuICAgIEBPdXRwdXQoKSBwYXJ0aWNsZXNJbml0OiBFdmVudEVtaXR0ZXI8RW5naW5lPiA9IG5ldyBFdmVudEVtaXR0ZXI8RW5naW5lPigpO1xufVxuIl19